// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminApproved extends ethereum.Event {
  get params(): AdminApproved__Params {
    return new AdminApproved__Params(this);
  }
}

export class AdminApproved__Params {
  _event: AdminApproved;

  constructor(event: AdminApproved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AdminRevoked extends ethereum.Event {
  get params(): AdminRevoked__Params {
    return new AdminRevoked__Params(this);
  }
}

export class AdminRevoked__Params {
  _event: AdminRevoked;

  constructor(event: AdminRevoked) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CollectionActivated extends ethereum.Event {
  get params(): CollectionActivated__Params {
    return new CollectionActivated__Params(this);
  }
}

export class CollectionActivated__Params {
  _event: CollectionActivated;

  constructor(event: CollectionActivated) {
    this._event = event;
  }

  get startTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get presaleInterval(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get claimStartTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get claimEndTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CollectionDeactivated extends ethereum.Event {
  get params(): CollectionDeactivated__Params {
    return new CollectionDeactivated__Params(this);
  }
}

export class CollectionDeactivated__Params {
  _event: CollectionDeactivated;

  constructor(event: CollectionDeactivated) {
    this._event = event;
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__getRoyaltiesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class Contract__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__stateResultValue0Struct extends ethereum.Tuple {
  get transactionLimit(): i32 {
    return this[0].toI32();
  }

  get purchaseMax(): i32 {
    return this[1].toI32();
  }

  get purchaseRemaining(): i32 {
    return this[2].toI32();
  }

  get purchasePrice(): BigInt {
    return this[3].toBigInt();
  }

  get purchaseLimit(): i32 {
    return this[4].toI32();
  }

  get presalePurchasePrice(): BigInt {
    return this[5].toBigInt();
  }

  get presalePurchaseLimit(): i32 {
    return this[6].toI32();
  }

  get purchaseCount(): i32 {
    return this[7].toI32();
  }

  get active(): boolean {
    return this[8].toBoolean();
  }

  get startTime(): BigInt {
    return this[9].toBigInt();
  }

  get endTime(): BigInt {
    return this[10].toBigInt();
  }

  get presaleInterval(): BigInt {
    return this[11].toBigInt();
  }

  get claimStartTime(): BigInt {
    return this[12].toBigInt();
  }

  get claimEndTime(): BigInt {
    return this[13].toBigInt();
  }

  get useDynamicPresalePurchaseLimit(): boolean {
    return this[14].toBoolean();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  active(): boolean {
    let result = super.call("active", "active():(bool)", []);

    return result[0].toBoolean();
  }

  try_active(): ethereum.CallResult<boolean> {
    let result = super.tryCall("active", "active():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf1(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf1(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  claimEndTime(): BigInt {
    let result = super.call("claimEndTime", "claimEndTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimEndTime", "claimEndTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimStartTime(): BigInt {
    let result = super.call("claimStartTime", "claimStartTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimStartTime",
      "claimStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  endTime(): BigInt {
    let result = super.call("endTime", "endTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_endTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("endTime", "endTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAdmins(): Array<Address> {
    let result = super.call("getAdmins", "getAdmins():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getAdmins(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getAdmins", "getAdmins():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getFeeBps(param0: BigInt): Array<BigInt> {
    let result = super.call("getFeeBps", "getFeeBps(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigIntArray();
  }

  try_getFeeBps(param0: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getFeeBps", "getFeeBps(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getFeeRecipients(param0: BigInt): Array<Address> {
    let result = super.call(
      "getFeeRecipients",
      "getFeeRecipients(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddressArray();
  }

  try_getFeeRecipients(param0: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getFeeRecipients",
      "getFeeRecipients(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRoyalties(param0: BigInt): Contract__getRoyaltiesResult {
    let result = super.call(
      "getRoyalties",
      "getRoyalties(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__getRoyaltiesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getRoyalties(
    param0: BigInt
  ): ethereum.CallResult<Contract__getRoyaltiesResult> {
    let result = super.tryCall(
      "getRoyalties",
      "getRoyalties(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getRoyaltiesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  isAdmin(admin: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(admin)
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(admin: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(admin)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSupply(): i32 {
    let result = super.call("maxSupply", "maxSupply():(uint16)", []);

    return result[0].toI32();
  }

  try_maxSupply(): ethereum.CallResult<i32> {
    let result = super.tryCall("maxSupply", "maxSupply():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  nonceUsed(nonce: string): boolean {
    let result = super.call("nonceUsed", "nonceUsed(string):(bool)", [
      ethereum.Value.fromString(nonce)
    ]);

    return result[0].toBoolean();
  }

  try_nonceUsed(nonce: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("nonceUsed", "nonceUsed(string):(bool)", [
      ethereum.Value.fromString(nonce)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  presaleInterval(): BigInt {
    let result = super.call(
      "presaleInterval",
      "presaleInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_presaleInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "presaleInterval",
      "presaleInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  presalePurchaseLimit(): i32 {
    let result = super.call(
      "presalePurchaseLimit",
      "presalePurchaseLimit():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_presalePurchaseLimit(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "presalePurchaseLimit",
      "presalePurchaseLimit():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  presalePurchasePrice(): BigInt {
    let result = super.call(
      "presalePurchasePrice",
      "presalePurchasePrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_presalePurchasePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "presalePurchasePrice",
      "presalePurchasePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  purchaseCount(): i32 {
    let result = super.call("purchaseCount", "purchaseCount():(uint16)", []);

    return result[0].toI32();
  }

  try_purchaseCount(): ethereum.CallResult<i32> {
    let result = super.tryCall("purchaseCount", "purchaseCount():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  purchaseLimit(): i32 {
    let result = super.call("purchaseLimit", "purchaseLimit():(uint16)", []);

    return result[0].toI32();
  }

  try_purchaseLimit(): ethereum.CallResult<i32> {
    let result = super.tryCall("purchaseLimit", "purchaseLimit():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  purchaseMax(): i32 {
    let result = super.call("purchaseMax", "purchaseMax():(uint16)", []);

    return result[0].toI32();
  }

  try_purchaseMax(): ethereum.CallResult<i32> {
    let result = super.tryCall("purchaseMax", "purchaseMax():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  purchasePrice(): BigInt {
    let result = super.call("purchasePrice", "purchasePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_purchasePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "purchasePrice",
      "purchasePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  purchaseRemaining(): i32 {
    let result = super.call(
      "purchaseRemaining",
      "purchaseRemaining():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_purchaseRemaining(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "purchaseRemaining",
      "purchaseRemaining():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  reserveCount(): i32 {
    let result = super.call("reserveCount", "reserveCount():(uint16)", []);

    return result[0].toI32();
  }

  try_reserveCount(): ethereum.CallResult<i32> {
    let result = super.tryCall("reserveCount", "reserveCount():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  royaltyInfo(param0: BigInt, value: BigInt): Contract__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return new Contract__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    param0: BigInt,
    value: BigInt
  ): ethereum.CallResult<Contract__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__royaltyInfoResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  startTime(): BigInt {
    let result = super.call("startTime", "startTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startTime", "startTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  state(): Contract__stateResultValue0Struct {
    let result = super.call(
      "state",
      "state():((uint16,uint16,uint16,uint256,uint16,uint256,uint16,uint16,bool,uint256,uint256,uint256,uint256,uint256,bool))",
      []
    );

    return changetype<Contract__stateResultValue0Struct>(result[0].toTuple());
  }

  try_state(): ethereum.CallResult<Contract__stateResultValue0Struct> {
    let result = super.tryCall(
      "state",
      "state():((uint16,uint16,uint16,uint256,uint16,uint256,uint16,uint16,bool,uint256,uint256,uint256,uint256,uint256,bool))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__stateResultValue0Struct>(value[0].toTuple())
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transactionLimit(): i32 {
    let result = super.call(
      "transactionLimit",
      "transactionLimit():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_transactionLimit(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "transactionLimit",
      "transactionLimit():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  transferLocked(): boolean {
    let result = super.call("transferLocked", "transferLocked():(bool)", []);

    return result[0].toBoolean();
  }

  try_transferLocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("transferLocked", "transferLocked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  useDynamicPresalePurchaseLimit(): boolean {
    let result = super.call(
      "useDynamicPresalePurchaseLimit",
      "useDynamicPresalePurchaseLimit():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_useDynamicPresalePurchaseLimit(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "useDynamicPresalePurchaseLimit",
      "useDynamicPresalePurchaseLimit():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get signingAddress_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActivateCall extends ethereum.Call {
  get inputs(): ActivateCall__Inputs {
    return new ActivateCall__Inputs(this);
  }

  get outputs(): ActivateCall__Outputs {
    return new ActivateCall__Outputs(this);
  }
}

export class ActivateCall__Inputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }
}

export class ActivateCall__Outputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }
}

export class ApproveAdminCall extends ethereum.Call {
  get inputs(): ApproveAdminCall__Inputs {
    return new ApproveAdminCall__Inputs(this);
  }

  get outputs(): ApproveAdminCall__Outputs {
    return new ApproveAdminCall__Outputs(this);
  }
}

export class ApproveAdminCall__Inputs {
  _call: ApproveAdminCall;

  constructor(call: ApproveAdminCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApproveAdminCall__Outputs {
  _call: ApproveAdminCall;

  constructor(call: ApproveAdminCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class DeactivateCall extends ethereum.Call {
  get inputs(): DeactivateCall__Inputs {
    return new DeactivateCall__Inputs(this);
  }

  get outputs(): DeactivateCall__Outputs {
    return new DeactivateCall__Outputs(this);
  }
}

export class DeactivateCall__Inputs {
  _call: DeactivateCall;

  constructor(call: DeactivateCall) {
    this._call = call;
  }
}

export class DeactivateCall__Outputs {
  _call: DeactivateCall;

  constructor(call: DeactivateCall) {
    this._call = call;
  }
}

export class PurchaseCall extends ethereum.Call {
  get inputs(): PurchaseCall__Inputs {
    return new PurchaseCall__Inputs(this);
  }

  get outputs(): PurchaseCall__Outputs {
    return new PurchaseCall__Outputs(this);
  }
}

export class PurchaseCall__Inputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get amount(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class PurchaseCall__Outputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevokeAdminCall extends ethereum.Call {
  get inputs(): RevokeAdminCall__Inputs {
    return new RevokeAdminCall__Inputs(this);
  }

  get outputs(): RevokeAdminCall__Outputs {
    return new RevokeAdminCall__Outputs(this);
  }
}

export class RevokeAdminCall__Inputs {
  _call: RevokeAdminCall;

  constructor(call: RevokeAdminCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeAdminCall__Outputs {
  _call: RevokeAdminCall;

  constructor(call: RevokeAdminCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetCollectionURICall extends ethereum.Call {
  get inputs(): SetCollectionURICall__Inputs {
    return new SetCollectionURICall__Inputs(this);
  }

  get outputs(): SetCollectionURICall__Outputs {
    return new SetCollectionURICall__Outputs(this);
  }
}

export class SetCollectionURICall__Inputs {
  _call: SetCollectionURICall;

  constructor(call: SetCollectionURICall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetCollectionURICall__Outputs {
  _call: SetCollectionURICall;

  constructor(call: SetCollectionURICall) {
    this._call = call;
  }
}

export class SetTransferLockedCall extends ethereum.Call {
  get inputs(): SetTransferLockedCall__Inputs {
    return new SetTransferLockedCall__Inputs(this);
  }

  get outputs(): SetTransferLockedCall__Outputs {
    return new SetTransferLockedCall__Outputs(this);
  }
}

export class SetTransferLockedCall__Inputs {
  _call: SetTransferLockedCall;

  constructor(call: SetTransferLockedCall) {
    this._call = call;
  }

  get locked(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetTransferLockedCall__Outputs {
  _call: SetTransferLockedCall;

  constructor(call: SetTransferLockedCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateRoyaltiesCall extends ethereum.Call {
  get inputs(): UpdateRoyaltiesCall__Inputs {
    return new UpdateRoyaltiesCall__Inputs(this);
  }

  get outputs(): UpdateRoyaltiesCall__Outputs {
    return new UpdateRoyaltiesCall__Outputs(this);
  }
}

export class UpdateRoyaltiesCall__Inputs {
  _call: UpdateRoyaltiesCall;

  constructor(call: UpdateRoyaltiesCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bps(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateRoyaltiesCall__Outputs {
  _call: UpdateRoyaltiesCall;

  constructor(call: UpdateRoyaltiesCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
