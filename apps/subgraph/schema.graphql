type Collection @entity {
  id: ID!
  owner: Account!
  name: String!
  symbol: String!
  tokens: [Token!]! @derivedFrom(field: "collection")
}

type Account @entity {
  id: ID!
  tokens: [Token!]! @derivedFrom(field: "owner")
  collections: [Collection!]! @derivedFrom(field: "owner")
}

type Token @entity {
  id: ID!
  scId: BigInt!
  uri: String!
  owner: Account!
  collection: Collection!
  metadata: TokenMetadata
}

type TokenMetadata @entity {
  id: ID!
  token: Token!
  name: String!
  description: String!
  image: String!
}

enum AuthenticityRequestStatus {
  Pending
  Rejected
  Registered
}

type AuthenticityRequest @entity {
  id: ID!
  collection: Collection!
  tokenUri: String!
  tokenUriSignature: String!
  similarity: BigDecimal
  status: AuthenticityRequestStatus!
}

type Ask @entity {
  id: ID!
  token: Token!
  seller: Account!
  currency: String!
  price: BigDecimal!
  buyer: Account!
}
