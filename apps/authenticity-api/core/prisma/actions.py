# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
import warnings

from . import types, errors
from ._types import BaseModelT


if TYPE_CHECKING:
    from .client import Client


class SimilarityActions:
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type['models.Similarity']) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List['models.Similarity']:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Similarity]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Similarity.prisma().query_raw(
            'SELECT * FROM Similarity WHERE id = ?',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional['models.Similarity']:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Similarity
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Similarity.prisma().query_first(
            'SELECT * FROM Similarity WHERE similarity = ?',
            377401575,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.SimilarityCreateInput,
        include: Optional[types.SimilarityInclude] = None
    ) -> 'models.Similarity':
        """Create a new Similarity record.

        Parameters
        ----------
        data
            Similarity record data
        include
            Specifies which relations should be loaded on the returned Similarity model

        Returns
        -------
        prisma.models.Similarity
            The created Similarity record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Similarity record from just the required fields
        similarity = await Similarity.prisma().create(
            data={
                # data to create a Similarity record
                'id': 'ggciceaie',
                'similarity': 1147902781,
                'imageUrl': 'cadfabfehe',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='Similarity',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.SimilarityCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Similarity records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Similarity record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Similarity.prisma().create_many(
            data=[
                {
                    # data to create a Similarity record
                    'id': 'dgiiaaijj',
                    'similarity': 1508029952,
                    'imageUrl': 'eigcfgbif',
                },
                {
                    # data to create a Similarity record
                    'id': 'bagcfbhiig',
                    'similarity': 267834847,
                    'imageUrl': 'biabhbdai',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='Similarity',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.SimilarityWhereUniqueInput,
        include: Optional[types.SimilarityInclude] = None
    ) -> Optional['models.Similarity']:
        """Delete a single Similarity record.

        Parameters
        ----------
        where
            Similarity filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Similarity model

        Returns
        -------
        prisma.models.Similarity
            The deleted Similarity record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        similarity = await Similarity.prisma().delete(
            where={
                'id': 'idghgaicb',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='Similarity',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.SimilarityWhereUniqueInput,
        include: Optional[types.SimilarityInclude] = None
    ) -> Optional['models.Similarity']:
        """Find a unique Similarity record.

        Parameters
        ----------
        where
            Similarity filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Similarity model

        Returns
        -------
        prisma.models.Similarity
            The found Similarity record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        similarity = await Similarity.prisma().find_unique(
            where={
                'id': 'fjfddhigg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='Similarity',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SimilarityWhereInput] = None,
        cursor: Optional[types.SimilarityWhereUniqueInput] = None,
        include: Optional[types.SimilarityInclude] = None,
        order: Optional[Union[types.SimilarityOrderByInput, List[types.SimilarityOrderByInput]]] = None,
    ) -> List['models.Similarity']:
        """Find multiple Similarity records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Similarity records returned
        skip
            Ignore the first N results
        where
            Similarity filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Similarity model
        order
            Order the returned Similarity records by any field

        Returns
        -------
        List[prisma.models.Similarity]
            The list of all Similarity records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Similarity records
        similaritys = await Similarity.prisma().find_many(take=10)

        # find the first 5 Similarity records ordered by the imageUrl field
        similaritys = await Similarity.prisma().find_many(
            take=5,
            order={
                'imageUrl': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='Similarity',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SimilarityWhereInput] = None,
        cursor: Optional[types.SimilarityWhereUniqueInput] = None,
        include: Optional[types.SimilarityInclude] = None,
        order: Optional[Union[types.SimilarityOrderByInput, List[types.SimilarityOrderByInput]]] = None,
    ) -> Optional['models.Similarity']:
        """Find a single Similarity record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Similarity filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Similarity model
        order
            Order the returned Similarity records by any field

        Returns
        -------
        prisma.models.Similarity
            The first Similarity record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Similarity record ordered by the id field
        similarity = await Similarity.prisma().find_first(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='Similarity',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.SimilarityUpdateInput,
        where: types.SimilarityWhereUniqueInput,
        include: Optional[types.SimilarityInclude] = None
    ) -> Optional['models.Similarity']:
        """Update a single Similarity record.

        Parameters
        ----------
        data
            Similarity record data specifying what to update
        where
            Similarity filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Similarity model

        Returns
        -------
        prisma.models.Similarity
            The updated Similarity record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        similarity = await Similarity.prisma().update(
            where={
                'id': 'hjaecfifb',
            },
            data={
                # data to update the Similarity record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='Similarity',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.SimilarityWhereUniqueInput,
        data: types.SimilarityUpsertInput,
        include: Optional[types.SimilarityInclude] = None,
    ) -> 'models.Similarity':
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Similarity filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Similarity model

        Returns
        -------
        prisma.models.Similarity
            The created or updated Similarity record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        similarity = await Similarity.prisma().upsert(
            where={
                'id': 'cbbbjbfcii',
            },
            data={
                'create': {
                    'id': 'cbbbjbfcii',
                    'similarity': 267834847,
                    'imageUrl': 'biabhbdai',
                },
                'update': {
                    'similarity': 267834847,
                    'imageUrl': 'biabhbdai',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='Similarity',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.SimilarityUpdateManyMutationInput,
        where: types.SimilarityWhereInput,
    ) -> int:
        """Update multiple Similarity records

        Parameters
        ----------
        data
            Similarity data to update the selected Similarity records to
        where
            Filter to select the Similarity records to update

        Returns
        -------
        int
            The total number of Similarity records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Similarity records
        total = await Similarity.prisma().update_many(
            data={
                'similarity': 1149758321
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='Similarity',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SimilarityWhereInput] = None,
        cursor: Optional[types.SimilarityWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Similarity records present in the database

        Parameters
        ----------
        select
            Select the Similarity fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Similarity filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SimilarityCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Similarity.prisma().count()

        # results: prisma.types.SimilarityCountAggregateOutput
        results = await Similarity.prisma().count(
            select={
                '_all': True,
                'imageUrl': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.SimilarityCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SimilarityWhereInput] = None,
        cursor: Optional[types.SimilarityWhereUniqueInput] = None,
    ) -> types.SimilarityCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.SimilarityCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SimilarityWhereInput] = None,
        cursor: Optional[types.SimilarityWhereUniqueInput] = None,
    ) -> Union[int, types.SimilarityCountAggregateOutput]:
        """Count the number of Similarity records present in the database

        Parameters
        ----------
        select
            Select the Similarity fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Similarity filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SimilarityCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Similarity.prisma().count()

        # results: prisma.types.SimilarityCountAggregateOutput
        results = await Similarity.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='Similarity',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.SimilarityCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.SimilarityWhereInput] = None
    ) -> int:
        """Delete multiple Similarity records.

        Parameters
        ----------
        where
            Optional Similarity filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Similarity records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Similarity records
        total = await Similarity.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='Similarity',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.SimilarityScalarFieldKeys'],
        *,
        where: Optional['types.SimilarityWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.SimilarityAvgAggregateInput'] = None,
        sum: Optional['types.SimilaritySumAggregateInput'] = None,
        min: Optional['types.SimilarityMinAggregateInput'] = None,
        max: Optional['types.SimilarityMaxAggregateInput'] = None,
        having: Optional['types.SimilarityScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.SimilarityCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.SimilarityScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.SimilarityScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.SimilarityGroupByOutput']:
        """Group Similarity records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Similarity fields to group records by
        where
            Similarity filter to select records
        take
            Limit the maximum number of Similarity records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.SimilarityGroupByOutput]
            A list of dictionaries representing the Similarity record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Similarity records by similarity values
        # and count how many records are in each group
        results = await Similarity.prisma().group_by(
            ['similarity'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='Similarity',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ClosestSimilarityActions:
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type['models.ClosestSimilarity']) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List['models.ClosestSimilarity']:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.ClosestSimilarity]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await ClosestSimilarity.prisma().query_raw(
            'SELECT * FROM ClosestSimilarity WHERE incomingId = ?',
            'bgeecijdgg',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional['models.ClosestSimilarity']:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.ClosestSimilarity
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await ClosestSimilarity.prisma().query_first(
            'SELECT * FROM ClosestSimilarity WHERE originalId = ?',
            'bdiicjafbj',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ClosestSimilarityCreateInput,
        include: Optional[types.ClosestSimilarityInclude] = None
    ) -> 'models.ClosestSimilarity':
        """Create a new ClosestSimilarity record.

        Parameters
        ----------
        data
            ClosestSimilarity record data
        include
            Specifies which relations should be loaded on the returned ClosestSimilarity model

        Returns
        -------
        prisma.models.ClosestSimilarity
            The created ClosestSimilarity record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a ClosestSimilarity record from just the required fields
        closestsimilarity = await ClosestSimilarity.prisma().create(
            data={
                # data to create a ClosestSimilarity record
                'incomingId': 'bgehebiafc',
                'originalId': 'bghffegacj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='ClosestSimilarity',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ClosestSimilarityCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple ClosestSimilarity records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of ClosestSimilarity record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await ClosestSimilarity.prisma().create_many(
            data=[
                {
                    # data to create a ClosestSimilarity record
                    'incomingId': 'bhghchehcc',
                    'originalId': 'dcgchcbbf',
                },
                {
                    # data to create a ClosestSimilarity record
                    'incomingId': 'bdedcabahc',
                    'originalId': 'ghfhiafcb',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='ClosestSimilarity',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ClosestSimilarityWhereUniqueInput,
        include: Optional[types.ClosestSimilarityInclude] = None
    ) -> Optional['models.ClosestSimilarity']:
        """Delete a single ClosestSimilarity record.

        Parameters
        ----------
        where
            ClosestSimilarity filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned ClosestSimilarity model

        Returns
        -------
        prisma.models.ClosestSimilarity
            The deleted ClosestSimilarity record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        closestsimilarity = await ClosestSimilarity.prisma().delete(
            where={
                # ClosestSimilarity where unique filter

            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='ClosestSimilarity',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.ClosestSimilarityWhereUniqueInput,
        include: Optional[types.ClosestSimilarityInclude] = None
    ) -> Optional['models.ClosestSimilarity']:
        """Find a unique ClosestSimilarity record.

        Parameters
        ----------
        where
            ClosestSimilarity filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ClosestSimilarity model

        Returns
        -------
        prisma.models.ClosestSimilarity
            The found ClosestSimilarity record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        closestsimilarity = await ClosestSimilarity.prisma().find_unique(
            where={
                # ClosestSimilarity where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='ClosestSimilarity',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ClosestSimilarityWhereInput] = None,
        cursor: Optional[types.ClosestSimilarityWhereUniqueInput] = None,
        include: Optional[types.ClosestSimilarityInclude] = None,
        order: Optional[Union[types.ClosestSimilarityOrderByInput, List[types.ClosestSimilarityOrderByInput]]] = None,
    ) -> List['models.ClosestSimilarity']:
        """Find multiple ClosestSimilarity records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of ClosestSimilarity records returned
        skip
            Ignore the first N results
        where
            ClosestSimilarity filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ClosestSimilarity model
        order
            Order the returned ClosestSimilarity records by any field

        Returns
        -------
        List[prisma.models.ClosestSimilarity]
            The list of all ClosestSimilarity records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 ClosestSimilarity records
        closestsimilaritys = await ClosestSimilarity.prisma().find_many(take=10)

        # find the first 5 ClosestSimilarity records ordered by the incomingId field
        closestsimilaritys = await ClosestSimilarity.prisma().find_many(
            take=5,
            order={
                'incomingId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='ClosestSimilarity',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ClosestSimilarityWhereInput] = None,
        cursor: Optional[types.ClosestSimilarityWhereUniqueInput] = None,
        include: Optional[types.ClosestSimilarityInclude] = None,
        order: Optional[Union[types.ClosestSimilarityOrderByInput, List[types.ClosestSimilarityOrderByInput]]] = None,
    ) -> Optional['models.ClosestSimilarity']:
        """Find a single ClosestSimilarity record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ClosestSimilarity filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ClosestSimilarity model
        order
            Order the returned ClosestSimilarity records by any field

        Returns
        -------
        prisma.models.ClosestSimilarity
            The first ClosestSimilarity record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ClosestSimilarity record ordered by the originalId field
        closestsimilarity = await ClosestSimilarity.prisma().find_first(
            skip=1,
            order={
                'originalId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='ClosestSimilarity',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.ClosestSimilarityUpdateInput,
        where: types.ClosestSimilarityWhereUniqueInput,
        include: Optional[types.ClosestSimilarityInclude] = None
    ) -> Optional['models.ClosestSimilarity']:
        """Update a single ClosestSimilarity record.

        Parameters
        ----------
        data
            ClosestSimilarity record data specifying what to update
        where
            ClosestSimilarity filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned ClosestSimilarity model

        Returns
        -------
        prisma.models.ClosestSimilarity
            The updated ClosestSimilarity record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        closestsimilarity = await ClosestSimilarity.prisma().update(
            where={
                # ClosestSimilarity where unique filter

            },
            data={
                # data to update the ClosestSimilarity record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='ClosestSimilarity',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.ClosestSimilarityWhereUniqueInput,
        data: types.ClosestSimilarityUpsertInput,
        include: Optional[types.ClosestSimilarityInclude] = None,
    ) -> 'models.ClosestSimilarity':
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            ClosestSimilarity filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned ClosestSimilarity model

        Returns
        -------
        prisma.models.ClosestSimilarity
            The created or updated ClosestSimilarity record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        closestsimilarity = await ClosestSimilarity.prisma().upsert(
            where={
                # ClosestSimilarity where unique filter
            },
            data={
                'create': {
                    # ClosestSimilarity data to be set if the record does not exist
                },
                'update': {
                    # ClosestSimilarity data to be set if the record does exist
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='ClosestSimilarity',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.ClosestSimilarityUpdateManyMutationInput,
        where: types.ClosestSimilarityWhereInput,
    ) -> int:
        """Update multiple ClosestSimilarity records

        Parameters
        ----------
        data
            ClosestSimilarity data to update the selected ClosestSimilarity records to
        where
            Filter to select the ClosestSimilarity records to update

        Returns
        -------
        int
            The total number of ClosestSimilarity records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all ClosestSimilarity records
        total = await ClosestSimilarity.prisma().update_many(
            data={
                'incomingId': 'heejgedji'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='ClosestSimilarity',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ClosestSimilarityWhereInput] = None,
        cursor: Optional[types.ClosestSimilarityWhereUniqueInput] = None,
    ) -> int:
        """Count the number of ClosestSimilarity records present in the database

        Parameters
        ----------
        select
            Select the ClosestSimilarity fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ClosestSimilarity filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ClosestSimilarityCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await ClosestSimilarity.prisma().count()

        # results: prisma.types.ClosestSimilarityCountAggregateOutput
        results = await ClosestSimilarity.prisma().count(
            select={
                '_all': True,
                'originalId': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ClosestSimilarityCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ClosestSimilarityWhereInput] = None,
        cursor: Optional[types.ClosestSimilarityWhereUniqueInput] = None,
    ) -> types.ClosestSimilarityCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ClosestSimilarityCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ClosestSimilarityWhereInput] = None,
        cursor: Optional[types.ClosestSimilarityWhereUniqueInput] = None,
    ) -> Union[int, types.ClosestSimilarityCountAggregateOutput]:
        """Count the number of ClosestSimilarity records present in the database

        Parameters
        ----------
        select
            Select the ClosestSimilarity fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ClosestSimilarity filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ClosestSimilarityCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await ClosestSimilarity.prisma().count()

        # results: prisma.types.ClosestSimilarityCountAggregateOutput
        results = await ClosestSimilarity.prisma().count(
            select={
                '_all': True,
                'incomingId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='ClosestSimilarity',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ClosestSimilarityCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ClosestSimilarityWhereInput] = None
    ) -> int:
        """Delete multiple ClosestSimilarity records.

        Parameters
        ----------
        where
            Optional ClosestSimilarity filter to find the records to be deleted

        Returns
        -------
        int
            The total number of ClosestSimilarity records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all ClosestSimilarity records
        total = await ClosestSimilarity.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='ClosestSimilarity',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ClosestSimilarityScalarFieldKeys'],
        *,
        where: Optional['types.ClosestSimilarityWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ClosestSimilarityAvgAggregateInput'] = None,
        sum: Optional['types.ClosestSimilaritySumAggregateInput'] = None,
        min: Optional['types.ClosestSimilarityMinAggregateInput'] = None,
        max: Optional['types.ClosestSimilarityMaxAggregateInput'] = None,
        having: Optional['types.ClosestSimilarityScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ClosestSimilarityCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ClosestSimilarityScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ClosestSimilarityScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ClosestSimilarityGroupByOutput']:
        """Group ClosestSimilarity records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar ClosestSimilarity fields to group records by
        where
            ClosestSimilarity filter to select records
        take
            Limit the maximum number of ClosestSimilarity records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ClosestSimilarityGroupByOutput]
            A list of dictionaries representing the ClosestSimilarity record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group ClosestSimilarity records by originalId values
        # and count how many records are in each group
        results = await ClosestSimilarity.prisma().group_by(
            ['originalId'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='ClosestSimilarity',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models
