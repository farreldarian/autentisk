# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[str]]


class _StringListFilterHasInput(TypedDict):
    has: str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[str]


class _StringListUpdatePush(TypedDict):
    push: List[str]


StringListUpdate = Union[
    List[str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[bool]


BooleanListUpdate = Union[
    List[bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[int]]


class _IntListFilterHasInput(TypedDict):
    has: int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[int]


class _IntListUpdatePush(TypedDict):
    push: List[int]


IntListUpdate = Union[
    List[int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[int]]


class _BigIntListFilterHasInput(TypedDict):
    has: int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[int]


class _BigIntListUpdatePush(TypedDict):
    push: List[int]


BigIntListUpdate = Union[
    List[int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[float]]


class _FloatListFilterHasInput(TypedDict):
    has: float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[float]


class _FloatListUpdatePush(TypedDict):
    push: List[float]


FloatListUpdate = Union[
    List[float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Similarity types

class SimilarityOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Similarity create method"""
    cloned: 'ClosestSimilarityCreateManyNestedWithoutRelationsInput'
    copying: 'ClosestSimilarityCreateManyNestedWithoutRelationsInput'


class SimilarityCreateInput(SimilarityOptionalCreateInput):
    """Required arguments to the Similarity create method"""
    id: str
    similarity: int
    imageUrl: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SimilarityOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Similarity create method, without relations"""


class SimilarityCreateWithoutRelationsInput(SimilarityOptionalCreateWithoutRelationsInput):
    """Required arguments to the Similarity create method, without relations"""
    id: str
    similarity: int
    imageUrl: str


class SimilarityCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SimilarityCreateWithoutRelationsInput'
    connect: 'SimilarityWhereUniqueInput'


class SimilarityCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SimilarityCreateWithoutRelationsInput', List['SimilarityCreateWithoutRelationsInput']]
    connect: Union['SimilarityWhereUniqueInput', List['SimilarityWhereUniqueInput']]


_SimilarityWhereUnique_id_Input = TypedDict(
    '_SimilarityWhereUnique_id_Input',
    {
        'id': 'str',
    },
    total=True
)

SimilarityWhereUniqueInput = _SimilarityWhereUnique_id_Input


class SimilarityUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: str
    similarity: Union[AtomicIntInput, int]
    imageUrl: str
    cloned: 'ClosestSimilarityUpdateManyWithoutRelationsInput'
    copying: 'ClosestSimilarityUpdateManyWithoutRelationsInput'


class SimilarityUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: str
    similarity: Union[AtomicIntInput, int]
    imageUrl: str


class SimilarityUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SimilarityCreateWithoutRelationsInput']
    connect: List['SimilarityWhereUniqueInput']
    set: List['SimilarityWhereUniqueInput']
    disconnect: List['SimilarityWhereUniqueInput']
    delete: List['SimilarityWhereUniqueInput']

    # TODO
    # update: List['SimilarityUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SimilarityUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SimilarityScalarWhereInput']
    # upsert: List['SimilarityUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['SimilarityCreateOrConnectWithoutRelationsInput']


class SimilarityUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SimilarityCreateWithoutRelationsInput'
    connect: 'SimilarityWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SimilarityUpdateInput'
    # upsert: 'SimilarityUpsertWithoutRelationsInput'
    # connectOrCreate: 'SimilarityCreateOrConnectWithoutRelationsInput'


class SimilarityUpsertInput(TypedDict):
    create: 'SimilarityCreateInput'
    update: 'SimilarityUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Similarity_id_OrderByInput = TypedDict(
    '_Similarity_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Similarity_similarity_OrderByInput = TypedDict(
    '_Similarity_similarity_OrderByInput',
    {
        'similarity': 'SortOrder',
    },
    total=True
)

_Similarity_imageUrl_OrderByInput = TypedDict(
    '_Similarity_imageUrl_OrderByInput',
    {
        'imageUrl': 'SortOrder',
    },
    total=True
)

SimilarityOrderByInput = Union[
    '_Similarity_id_OrderByInput',
    '_Similarity_similarity_OrderByInput',
    '_Similarity_imageUrl_OrderByInput',
]



# recursive Similarity types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SimilarityRelationFilter = TypedDict(
    'SimilarityRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SimilarityListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SimilarityInclude(TypedDict, total=False):
    """Similarity relational arguments"""
    cloned: Union[bool, 'FindManyClosestSimilarityArgsFromSimilarity']
    copying: Union[bool, 'FindManyClosestSimilarityArgsFromSimilarity']


    

class SimilarityIncludeFromSimilarity(TypedDict, total=False):
    """Relational arguments for Similarity"""
    cloned: Union[bool, 'FindManyClosestSimilarityArgsFromSimilarityRecursive1']
    copying: Union[bool, 'FindManyClosestSimilarityArgsFromSimilarityRecursive1']


class SimilarityIncludeFromSimilarityRecursive1(TypedDict, total=False):
    """Relational arguments for Similarity"""
    cloned: Union[bool, 'FindManyClosestSimilarityArgsFromSimilarityRecursive2']
    copying: Union[bool, 'FindManyClosestSimilarityArgsFromSimilarityRecursive2']


class SimilarityIncludeFromSimilarityRecursive2(TypedDict, total=False):
    """Relational arguments for Similarity"""
    cloned: Union[bool, 'FindManyClosestSimilarityArgsFromSimilarityRecursive3']
    copying: Union[bool, 'FindManyClosestSimilarityArgsFromSimilarityRecursive3']


class SimilarityIncludeFromSimilarityRecursive3(TypedDict, total=False):
    """Relational arguments for Similarity"""
    cloned: Union[bool, 'FindManyClosestSimilarityArgsFromSimilarityRecursive4']
    copying: Union[bool, 'FindManyClosestSimilarityArgsFromSimilarityRecursive4']


class SimilarityIncludeFromSimilarityRecursive4(TypedDict, total=False):
    """Relational arguments for Similarity"""

    

class SimilarityArgsFromSimilarity(TypedDict, total=False):
    """Arguments for Similarity"""
    include: 'SimilarityIncludeFromSimilarityRecursive1'


class SimilarityArgsFromSimilarityRecursive1(TypedDict, total=False):
    """Arguments for Similarity"""
    include: 'SimilarityIncludeFromSimilarityRecursive2'


class SimilarityArgsFromSimilarityRecursive2(TypedDict, total=False):
    """Arguments for Similarity"""
    include: 'SimilarityIncludeFromSimilarityRecursive3'


class SimilarityArgsFromSimilarityRecursive3(TypedDict, total=False):
    """Arguments for Similarity"""
    include: 'SimilarityIncludeFromSimilarityRecursive4'


class SimilarityArgsFromSimilarityRecursive4(TypedDict, total=False):
    """Arguments for Similarity"""
    
    

class FindManySimilarityArgsFromSimilarity(TypedDict, total=False):
    """Arguments for Similarity"""
    take: int
    skip: int
    order_by: Union['SimilarityOrderByInput', List['SimilarityOrderByInput']]
    where: 'SimilarityWhereInput'
    cursor: 'SimilarityWhereUniqueInput'
    include: 'SimilarityIncludeFromSimilarityRecursive1'


class FindManySimilarityArgsFromSimilarityRecursive1(TypedDict, total=False):
    """Arguments for Similarity"""
    take: int
    skip: int
    order_by: Union['SimilarityOrderByInput', List['SimilarityOrderByInput']]
    where: 'SimilarityWhereInput'
    cursor: 'SimilarityWhereUniqueInput'
    include: 'SimilarityIncludeFromSimilarityRecursive2'


class FindManySimilarityArgsFromSimilarityRecursive2(TypedDict, total=False):
    """Arguments for Similarity"""
    take: int
    skip: int
    order_by: Union['SimilarityOrderByInput', List['SimilarityOrderByInput']]
    where: 'SimilarityWhereInput'
    cursor: 'SimilarityWhereUniqueInput'
    include: 'SimilarityIncludeFromSimilarityRecursive3'


class FindManySimilarityArgsFromSimilarityRecursive3(TypedDict, total=False):
    """Arguments for Similarity"""
    take: int
    skip: int
    order_by: Union['SimilarityOrderByInput', List['SimilarityOrderByInput']]
    where: 'SimilarityWhereInput'
    cursor: 'SimilarityWhereUniqueInput'
    include: 'SimilarityIncludeFromSimilarityRecursive4'


class FindManySimilarityArgsFromSimilarityRecursive4(TypedDict, total=False):
    """Arguments for Similarity"""
    take: int
    skip: int
    order_by: Union['SimilarityOrderByInput', List['SimilarityOrderByInput']]
    where: 'SimilarityWhereInput'
    cursor: 'SimilarityWhereUniqueInput'
    
    

class ClosestSimilarityIncludeFromSimilarity(TypedDict, total=False):
    """Relational arguments for Similarity"""
    incoming: Union[bool, 'SimilarityArgsFromSimilarityRecursive1']
    original: Union[bool, 'SimilarityArgsFromSimilarityRecursive1']


class ClosestSimilarityIncludeFromSimilarityRecursive1(TypedDict, total=False):
    """Relational arguments for Similarity"""
    incoming: Union[bool, 'SimilarityArgsFromSimilarityRecursive2']
    original: Union[bool, 'SimilarityArgsFromSimilarityRecursive2']


class ClosestSimilarityIncludeFromSimilarityRecursive2(TypedDict, total=False):
    """Relational arguments for Similarity"""
    incoming: Union[bool, 'SimilarityArgsFromSimilarityRecursive3']
    original: Union[bool, 'SimilarityArgsFromSimilarityRecursive3']


class ClosestSimilarityIncludeFromSimilarityRecursive3(TypedDict, total=False):
    """Relational arguments for Similarity"""
    incoming: Union[bool, 'SimilarityArgsFromSimilarityRecursive4']
    original: Union[bool, 'SimilarityArgsFromSimilarityRecursive4']


class ClosestSimilarityIncludeFromSimilarityRecursive4(TypedDict, total=False):
    """Relational arguments for Similarity"""

    

class ClosestSimilarityArgsFromSimilarity(TypedDict, total=False):
    """Arguments for Similarity"""
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive1'


class ClosestSimilarityArgsFromSimilarityRecursive1(TypedDict, total=False):
    """Arguments for Similarity"""
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive2'


class ClosestSimilarityArgsFromSimilarityRecursive2(TypedDict, total=False):
    """Arguments for Similarity"""
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive3'


class ClosestSimilarityArgsFromSimilarityRecursive3(TypedDict, total=False):
    """Arguments for Similarity"""
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive4'


class ClosestSimilarityArgsFromSimilarityRecursive4(TypedDict, total=False):
    """Arguments for Similarity"""
    
    

class FindManyClosestSimilarityArgsFromSimilarity(TypedDict, total=False):
    """Arguments for Similarity"""
    take: int
    skip: int
    order_by: Union['ClosestSimilarityOrderByInput', List['ClosestSimilarityOrderByInput']]
    where: 'ClosestSimilarityWhereInput'
    cursor: 'ClosestSimilarityWhereUniqueInput'
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive1'


class FindManyClosestSimilarityArgsFromSimilarityRecursive1(TypedDict, total=False):
    """Arguments for Similarity"""
    take: int
    skip: int
    order_by: Union['ClosestSimilarityOrderByInput', List['ClosestSimilarityOrderByInput']]
    where: 'ClosestSimilarityWhereInput'
    cursor: 'ClosestSimilarityWhereUniqueInput'
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive2'


class FindManyClosestSimilarityArgsFromSimilarityRecursive2(TypedDict, total=False):
    """Arguments for Similarity"""
    take: int
    skip: int
    order_by: Union['ClosestSimilarityOrderByInput', List['ClosestSimilarityOrderByInput']]
    where: 'ClosestSimilarityWhereInput'
    cursor: 'ClosestSimilarityWhereUniqueInput'
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive3'


class FindManyClosestSimilarityArgsFromSimilarityRecursive3(TypedDict, total=False):
    """Arguments for Similarity"""
    take: int
    skip: int
    order_by: Union['ClosestSimilarityOrderByInput', List['ClosestSimilarityOrderByInput']]
    where: 'ClosestSimilarityWhereInput'
    cursor: 'ClosestSimilarityWhereUniqueInput'
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive4'


class FindManyClosestSimilarityArgsFromSimilarityRecursive4(TypedDict, total=False):
    """Arguments for Similarity"""
    take: int
    skip: int
    order_by: Union['ClosestSimilarityOrderByInput', List['ClosestSimilarityOrderByInput']]
    where: 'ClosestSimilarityWhereInput'
    cursor: 'ClosestSimilarityWhereUniqueInput'
    


FindManySimilarityArgs = FindManySimilarityArgsFromSimilarity
FindFirstSimilarityArgs = FindManySimilarityArgsFromSimilarity


    

class SimilarityWhereInput(TypedDict, total=False):
    """Similarity arguments for searching"""
    id: Union[str, 'types.StringFilter']
    similarity: Union[int, 'types.IntFilter']
    imageUrl: Union[str, 'types.StringFilter']
    cloned: 'ClosestSimilarityListRelationFilter'
    copying: 'ClosestSimilarityListRelationFilter'

    # should be noted that AND and NOT should be Union['SimilarityWhereInputRecursive1', List['SimilarityWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SimilarityWhereInputRecursive1']
    OR: List['SimilarityWhereInputRecursive1']
    NOT: List['SimilarityWhereInputRecursive1']


class SimilarityWhereInputRecursive1(TypedDict, total=False):
    """Similarity arguments for searching"""
    id: Union[str, 'types.StringFilter']
    similarity: Union[int, 'types.IntFilter']
    imageUrl: Union[str, 'types.StringFilter']
    cloned: 'ClosestSimilarityListRelationFilter'
    copying: 'ClosestSimilarityListRelationFilter'

    # should be noted that AND and NOT should be Union['SimilarityWhereInputRecursive2', List['SimilarityWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SimilarityWhereInputRecursive2']
    OR: List['SimilarityWhereInputRecursive2']
    NOT: List['SimilarityWhereInputRecursive2']


class SimilarityWhereInputRecursive2(TypedDict, total=False):
    """Similarity arguments for searching"""
    id: Union[str, 'types.StringFilter']
    similarity: Union[int, 'types.IntFilter']
    imageUrl: Union[str, 'types.StringFilter']
    cloned: 'ClosestSimilarityListRelationFilter'
    copying: 'ClosestSimilarityListRelationFilter'

    # should be noted that AND and NOT should be Union['SimilarityWhereInputRecursive3', List['SimilarityWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SimilarityWhereInputRecursive3']
    OR: List['SimilarityWhereInputRecursive3']
    NOT: List['SimilarityWhereInputRecursive3']


class SimilarityWhereInputRecursive3(TypedDict, total=False):
    """Similarity arguments for searching"""
    id: Union[str, 'types.StringFilter']
    similarity: Union[int, 'types.IntFilter']
    imageUrl: Union[str, 'types.StringFilter']
    cloned: 'ClosestSimilarityListRelationFilter'
    copying: 'ClosestSimilarityListRelationFilter'

    # should be noted that AND and NOT should be Union['SimilarityWhereInputRecursive4', List['SimilarityWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SimilarityWhereInputRecursive4']
    OR: List['SimilarityWhereInputRecursive4']
    NOT: List['SimilarityWhereInputRecursive4']


class SimilarityWhereInputRecursive4(TypedDict, total=False):
    """Similarity arguments for searching"""
    id: Union[str, 'types.StringFilter']
    similarity: Union[int, 'types.IntFilter']
    imageUrl: Union[str, 'types.StringFilter']
    cloned: 'ClosestSimilarityListRelationFilter'
    copying: 'ClosestSimilarityListRelationFilter'



# aggregate Similarity types


    

class SimilarityScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Similarity arguments for searching"""
    id: Union[str, 'types.StringWithAggregatesFilter']
    similarity: Union[int, 'types.IntWithAggregatesFilter']
    imageUrl: Union[str, 'types.StringWithAggregatesFilter']

    AND: List['SimilarityScalarWhereWithAggregatesInputRecursive1']
    OR: List['SimilarityScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SimilarityScalarWhereWithAggregatesInputRecursive1']


class SimilarityScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Similarity arguments for searching"""
    id: Union[str, 'types.StringWithAggregatesFilter']
    similarity: Union[int, 'types.IntWithAggregatesFilter']
    imageUrl: Union[str, 'types.StringWithAggregatesFilter']

    AND: List['SimilarityScalarWhereWithAggregatesInputRecursive2']
    OR: List['SimilarityScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SimilarityScalarWhereWithAggregatesInputRecursive2']


class SimilarityScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Similarity arguments for searching"""
    id: Union[str, 'types.StringWithAggregatesFilter']
    similarity: Union[int, 'types.IntWithAggregatesFilter']
    imageUrl: Union[str, 'types.StringWithAggregatesFilter']

    AND: List['SimilarityScalarWhereWithAggregatesInputRecursive3']
    OR: List['SimilarityScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SimilarityScalarWhereWithAggregatesInputRecursive3']


class SimilarityScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Similarity arguments for searching"""
    id: Union[str, 'types.StringWithAggregatesFilter']
    similarity: Union[int, 'types.IntWithAggregatesFilter']
    imageUrl: Union[str, 'types.StringWithAggregatesFilter']

    AND: List['SimilarityScalarWhereWithAggregatesInputRecursive4']
    OR: List['SimilarityScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SimilarityScalarWhereWithAggregatesInputRecursive4']


class SimilarityScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Similarity arguments for searching"""
    id: Union[str, 'types.StringWithAggregatesFilter']
    similarity: Union[int, 'types.IntWithAggregatesFilter']
    imageUrl: Union[str, 'types.StringWithAggregatesFilter']



class SimilarityGroupByOutput(TypedDict, total=False):
    id: str
    similarity: int
    imageUrl: str
    _sum: 'SimilaritySumAggregateOutput'
    _avg: 'SimilarityAvgAggregateOutput'
    _min: 'SimilarityMinAggregateOutput'
    _max: 'SimilarityMaxAggregateOutput'
    _count: 'SimilarityCountAggregateOutput'


class SimilarityAvgAggregateOutput(TypedDict, total=False):
    """Similarity output for aggregating averages"""
    similarity: float


class SimilaritySumAggregateOutput(TypedDict, total=False):
    """Similarity output for aggregating sums"""
    similarity: int


class SimilarityScalarAggregateOutput(TypedDict, total=False):
    """Similarity output including scalar fields"""
    id: str
    similarity: int
    imageUrl: str


SimilarityMinAggregateOutput = SimilarityScalarAggregateOutput
SimilarityMaxAggregateOutput = SimilarityScalarAggregateOutput


class SimilarityMaxAggregateInput(TypedDict, total=False):
    """Similarity input for aggregating by max"""
    id: bool
    similarity: bool
    imageUrl: bool


class SimilarityMinAggregateInput(TypedDict, total=False):
    """Similarity input for aggregating by min"""
    id: bool
    similarity: bool
    imageUrl: bool


class SimilarityNumberAggregateInput(TypedDict, total=False):
    """Similarity input for aggregating numbers"""
    similarity: bool


SimilarityAvgAggregateInput = SimilarityNumberAggregateInput
SimilaritySumAggregateInput = SimilarityNumberAggregateInput


SimilarityCountAggregateInput = TypedDict(
    'SimilarityCountAggregateInput',
    {
        'id': bool,
        'similarity': bool,
        'imageUrl': bool,
        '_all': bool,
    },
    total=False,
)

SimilarityCountAggregateOutput = TypedDict(
    'SimilarityCountAggregateOutput',
    {
        'id': int,
        'similarity': int,
        'imageUrl': int,
        '_all': int,
    },
    total=False,
)


SimilarityKeys = Literal[
    'id',
    'similarity',
    'imageUrl',
    'cloned',
    'copying',
]
SimilarityScalarFieldKeys = Literal[
    'id',
    'similarity',
    'imageUrl',
]
SimilarityScalarFieldKeysT = TypeVar('SimilarityScalarFieldKeysT', bound=SimilarityScalarFieldKeys)

SimilarityRelationalFieldKeys = Literal[
        'cloned',
        'copying',
    ]

# ClosestSimilarity types

class ClosestSimilarityOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ClosestSimilarity create method"""
    incomingId: str
    originalId: str
    incoming: 'SimilarityCreateNestedWithoutRelationsInput'
    original: 'SimilarityCreateNestedWithoutRelationsInput'


class ClosestSimilarityCreateInput(ClosestSimilarityOptionalCreateInput):
    """Required arguments to the ClosestSimilarity create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ClosestSimilarityOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ClosestSimilarity create method, without relations"""
    incomingId: str
    originalId: str


class ClosestSimilarityCreateWithoutRelationsInput(ClosestSimilarityOptionalCreateWithoutRelationsInput):
    """Required arguments to the ClosestSimilarity create method, without relations"""


class ClosestSimilarityCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ClosestSimilarityCreateWithoutRelationsInput'
    connect: 'ClosestSimilarityWhereUniqueInput'


class ClosestSimilarityCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ClosestSimilarityCreateWithoutRelationsInput', List['ClosestSimilarityCreateWithoutRelationsInput']]
    connect: Union['ClosestSimilarityWhereUniqueInput', List['ClosestSimilarityWhereUniqueInput']]


_ClosestSimilarityCompoundPrimaryKeyInner = TypedDict(
    '_ClosestSimilarityCompoundPrimaryKeyInner',
    {
        'originalId': 'str',
        'incomingId': 'str',
    },
    total=True
)

_ClosestSimilarityCompoundPrimaryKey = TypedDict(
    '_ClosestSimilarityCompoundPrimaryKey',
    {
        'originalId_incomingId': '_ClosestSimilarityCompoundPrimaryKeyInner',
    },
    total=True
)

ClosestSimilarityWhereUniqueInput = _ClosestSimilarityCompoundPrimaryKey


class ClosestSimilarityUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    incoming: 'SimilarityUpdateOneWithoutRelationsInput'
    original: 'SimilarityUpdateOneWithoutRelationsInput'


class ClosestSimilarityUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""


class ClosestSimilarityUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ClosestSimilarityCreateWithoutRelationsInput']
    connect: List['ClosestSimilarityWhereUniqueInput']
    set: List['ClosestSimilarityWhereUniqueInput']
    disconnect: List['ClosestSimilarityWhereUniqueInput']
    delete: List['ClosestSimilarityWhereUniqueInput']

    # TODO
    # update: List['ClosestSimilarityUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ClosestSimilarityUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ClosestSimilarityScalarWhereInput']
    # upsert: List['ClosestSimilarityUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ClosestSimilarityCreateOrConnectWithoutRelationsInput']


class ClosestSimilarityUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ClosestSimilarityCreateWithoutRelationsInput'
    connect: 'ClosestSimilarityWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ClosestSimilarityUpdateInput'
    # upsert: 'ClosestSimilarityUpsertWithoutRelationsInput'
    # connectOrCreate: 'ClosestSimilarityCreateOrConnectWithoutRelationsInput'


class ClosestSimilarityUpsertInput(TypedDict):
    create: 'ClosestSimilarityCreateInput'
    update: 'ClosestSimilarityUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ClosestSimilarity_incomingId_OrderByInput = TypedDict(
    '_ClosestSimilarity_incomingId_OrderByInput',
    {
        'incomingId': 'SortOrder',
    },
    total=True
)

_ClosestSimilarity_originalId_OrderByInput = TypedDict(
    '_ClosestSimilarity_originalId_OrderByInput',
    {
        'originalId': 'SortOrder',
    },
    total=True
)

ClosestSimilarityOrderByInput = Union[
    '_ClosestSimilarity_incomingId_OrderByInput',
    '_ClosestSimilarity_originalId_OrderByInput',
]



# recursive ClosestSimilarity types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ClosestSimilarityRelationFilter = TypedDict(
    'ClosestSimilarityRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ClosestSimilarityListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ClosestSimilarityInclude(TypedDict, total=False):
    """ClosestSimilarity relational arguments"""
    incoming: Union[bool, 'SimilarityArgsFromClosestSimilarity']
    original: Union[bool, 'SimilarityArgsFromClosestSimilarity']


    

class SimilarityIncludeFromClosestSimilarity(TypedDict, total=False):
    """Relational arguments for ClosestSimilarity"""
    cloned: Union[bool, 'FindManyClosestSimilarityArgsFromClosestSimilarityRecursive1']
    copying: Union[bool, 'FindManyClosestSimilarityArgsFromClosestSimilarityRecursive1']


class SimilarityIncludeFromClosestSimilarityRecursive1(TypedDict, total=False):
    """Relational arguments for ClosestSimilarity"""
    cloned: Union[bool, 'FindManyClosestSimilarityArgsFromClosestSimilarityRecursive2']
    copying: Union[bool, 'FindManyClosestSimilarityArgsFromClosestSimilarityRecursive2']


class SimilarityIncludeFromClosestSimilarityRecursive2(TypedDict, total=False):
    """Relational arguments for ClosestSimilarity"""
    cloned: Union[bool, 'FindManyClosestSimilarityArgsFromClosestSimilarityRecursive3']
    copying: Union[bool, 'FindManyClosestSimilarityArgsFromClosestSimilarityRecursive3']


class SimilarityIncludeFromClosestSimilarityRecursive3(TypedDict, total=False):
    """Relational arguments for ClosestSimilarity"""
    cloned: Union[bool, 'FindManyClosestSimilarityArgsFromClosestSimilarityRecursive4']
    copying: Union[bool, 'FindManyClosestSimilarityArgsFromClosestSimilarityRecursive4']


class SimilarityIncludeFromClosestSimilarityRecursive4(TypedDict, total=False):
    """Relational arguments for ClosestSimilarity"""

    

class SimilarityArgsFromClosestSimilarity(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    include: 'SimilarityIncludeFromSimilarityRecursive1'


class SimilarityArgsFromClosestSimilarityRecursive1(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    include: 'SimilarityIncludeFromSimilarityRecursive2'


class SimilarityArgsFromClosestSimilarityRecursive2(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    include: 'SimilarityIncludeFromSimilarityRecursive3'


class SimilarityArgsFromClosestSimilarityRecursive3(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    include: 'SimilarityIncludeFromSimilarityRecursive4'


class SimilarityArgsFromClosestSimilarityRecursive4(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    
    

class FindManySimilarityArgsFromClosestSimilarity(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    take: int
    skip: int
    order_by: Union['SimilarityOrderByInput', List['SimilarityOrderByInput']]
    where: 'SimilarityWhereInput'
    cursor: 'SimilarityWhereUniqueInput'
    include: 'SimilarityIncludeFromSimilarityRecursive1'


class FindManySimilarityArgsFromClosestSimilarityRecursive1(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    take: int
    skip: int
    order_by: Union['SimilarityOrderByInput', List['SimilarityOrderByInput']]
    where: 'SimilarityWhereInput'
    cursor: 'SimilarityWhereUniqueInput'
    include: 'SimilarityIncludeFromSimilarityRecursive2'


class FindManySimilarityArgsFromClosestSimilarityRecursive2(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    take: int
    skip: int
    order_by: Union['SimilarityOrderByInput', List['SimilarityOrderByInput']]
    where: 'SimilarityWhereInput'
    cursor: 'SimilarityWhereUniqueInput'
    include: 'SimilarityIncludeFromSimilarityRecursive3'


class FindManySimilarityArgsFromClosestSimilarityRecursive3(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    take: int
    skip: int
    order_by: Union['SimilarityOrderByInput', List['SimilarityOrderByInput']]
    where: 'SimilarityWhereInput'
    cursor: 'SimilarityWhereUniqueInput'
    include: 'SimilarityIncludeFromSimilarityRecursive4'


class FindManySimilarityArgsFromClosestSimilarityRecursive4(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    take: int
    skip: int
    order_by: Union['SimilarityOrderByInput', List['SimilarityOrderByInput']]
    where: 'SimilarityWhereInput'
    cursor: 'SimilarityWhereUniqueInput'
    
    

class ClosestSimilarityIncludeFromClosestSimilarity(TypedDict, total=False):
    """Relational arguments for ClosestSimilarity"""
    incoming: Union[bool, 'SimilarityArgsFromClosestSimilarityRecursive1']
    original: Union[bool, 'SimilarityArgsFromClosestSimilarityRecursive1']


class ClosestSimilarityIncludeFromClosestSimilarityRecursive1(TypedDict, total=False):
    """Relational arguments for ClosestSimilarity"""
    incoming: Union[bool, 'SimilarityArgsFromClosestSimilarityRecursive2']
    original: Union[bool, 'SimilarityArgsFromClosestSimilarityRecursive2']


class ClosestSimilarityIncludeFromClosestSimilarityRecursive2(TypedDict, total=False):
    """Relational arguments for ClosestSimilarity"""
    incoming: Union[bool, 'SimilarityArgsFromClosestSimilarityRecursive3']
    original: Union[bool, 'SimilarityArgsFromClosestSimilarityRecursive3']


class ClosestSimilarityIncludeFromClosestSimilarityRecursive3(TypedDict, total=False):
    """Relational arguments for ClosestSimilarity"""
    incoming: Union[bool, 'SimilarityArgsFromClosestSimilarityRecursive4']
    original: Union[bool, 'SimilarityArgsFromClosestSimilarityRecursive4']


class ClosestSimilarityIncludeFromClosestSimilarityRecursive4(TypedDict, total=False):
    """Relational arguments for ClosestSimilarity"""

    

class ClosestSimilarityArgsFromClosestSimilarity(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive1'


class ClosestSimilarityArgsFromClosestSimilarityRecursive1(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive2'


class ClosestSimilarityArgsFromClosestSimilarityRecursive2(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive3'


class ClosestSimilarityArgsFromClosestSimilarityRecursive3(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive4'


class ClosestSimilarityArgsFromClosestSimilarityRecursive4(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    
    

class FindManyClosestSimilarityArgsFromClosestSimilarity(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    take: int
    skip: int
    order_by: Union['ClosestSimilarityOrderByInput', List['ClosestSimilarityOrderByInput']]
    where: 'ClosestSimilarityWhereInput'
    cursor: 'ClosestSimilarityWhereUniqueInput'
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive1'


class FindManyClosestSimilarityArgsFromClosestSimilarityRecursive1(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    take: int
    skip: int
    order_by: Union['ClosestSimilarityOrderByInput', List['ClosestSimilarityOrderByInput']]
    where: 'ClosestSimilarityWhereInput'
    cursor: 'ClosestSimilarityWhereUniqueInput'
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive2'


class FindManyClosestSimilarityArgsFromClosestSimilarityRecursive2(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    take: int
    skip: int
    order_by: Union['ClosestSimilarityOrderByInput', List['ClosestSimilarityOrderByInput']]
    where: 'ClosestSimilarityWhereInput'
    cursor: 'ClosestSimilarityWhereUniqueInput'
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive3'


class FindManyClosestSimilarityArgsFromClosestSimilarityRecursive3(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    take: int
    skip: int
    order_by: Union['ClosestSimilarityOrderByInput', List['ClosestSimilarityOrderByInput']]
    where: 'ClosestSimilarityWhereInput'
    cursor: 'ClosestSimilarityWhereUniqueInput'
    include: 'ClosestSimilarityIncludeFromClosestSimilarityRecursive4'


class FindManyClosestSimilarityArgsFromClosestSimilarityRecursive4(TypedDict, total=False):
    """Arguments for ClosestSimilarity"""
    take: int
    skip: int
    order_by: Union['ClosestSimilarityOrderByInput', List['ClosestSimilarityOrderByInput']]
    where: 'ClosestSimilarityWhereInput'
    cursor: 'ClosestSimilarityWhereUniqueInput'
    


FindManyClosestSimilarityArgs = FindManyClosestSimilarityArgsFromClosestSimilarity
FindFirstClosestSimilarityArgs = FindManyClosestSimilarityArgsFromClosestSimilarity


    

class ClosestSimilarityWhereInput(TypedDict, total=False):
    """ClosestSimilarity arguments for searching"""
    incomingId: Union[str, 'types.StringFilter']
    originalId: Union[str, 'types.StringFilter']
    incoming: 'SimilarityRelationFilter'
    original: 'SimilarityRelationFilter'

    # should be noted that AND and NOT should be Union['ClosestSimilarityWhereInputRecursive1', List['ClosestSimilarityWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ClosestSimilarityWhereInputRecursive1']
    OR: List['ClosestSimilarityWhereInputRecursive1']
    NOT: List['ClosestSimilarityWhereInputRecursive1']


class ClosestSimilarityWhereInputRecursive1(TypedDict, total=False):
    """ClosestSimilarity arguments for searching"""
    incomingId: Union[str, 'types.StringFilter']
    originalId: Union[str, 'types.StringFilter']
    incoming: 'SimilarityRelationFilter'
    original: 'SimilarityRelationFilter'

    # should be noted that AND and NOT should be Union['ClosestSimilarityWhereInputRecursive2', List['ClosestSimilarityWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ClosestSimilarityWhereInputRecursive2']
    OR: List['ClosestSimilarityWhereInputRecursive2']
    NOT: List['ClosestSimilarityWhereInputRecursive2']


class ClosestSimilarityWhereInputRecursive2(TypedDict, total=False):
    """ClosestSimilarity arguments for searching"""
    incomingId: Union[str, 'types.StringFilter']
    originalId: Union[str, 'types.StringFilter']
    incoming: 'SimilarityRelationFilter'
    original: 'SimilarityRelationFilter'

    # should be noted that AND and NOT should be Union['ClosestSimilarityWhereInputRecursive3', List['ClosestSimilarityWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ClosestSimilarityWhereInputRecursive3']
    OR: List['ClosestSimilarityWhereInputRecursive3']
    NOT: List['ClosestSimilarityWhereInputRecursive3']


class ClosestSimilarityWhereInputRecursive3(TypedDict, total=False):
    """ClosestSimilarity arguments for searching"""
    incomingId: Union[str, 'types.StringFilter']
    originalId: Union[str, 'types.StringFilter']
    incoming: 'SimilarityRelationFilter'
    original: 'SimilarityRelationFilter'

    # should be noted that AND and NOT should be Union['ClosestSimilarityWhereInputRecursive4', List['ClosestSimilarityWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ClosestSimilarityWhereInputRecursive4']
    OR: List['ClosestSimilarityWhereInputRecursive4']
    NOT: List['ClosestSimilarityWhereInputRecursive4']


class ClosestSimilarityWhereInputRecursive4(TypedDict, total=False):
    """ClosestSimilarity arguments for searching"""
    incomingId: Union[str, 'types.StringFilter']
    originalId: Union[str, 'types.StringFilter']
    incoming: 'SimilarityRelationFilter'
    original: 'SimilarityRelationFilter'



# aggregate ClosestSimilarity types


    

class ClosestSimilarityScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ClosestSimilarity arguments for searching"""
    incomingId: Union[str, 'types.StringWithAggregatesFilter']
    originalId: Union[str, 'types.StringWithAggregatesFilter']

    AND: List['ClosestSimilarityScalarWhereWithAggregatesInputRecursive1']
    OR: List['ClosestSimilarityScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ClosestSimilarityScalarWhereWithAggregatesInputRecursive1']


class ClosestSimilarityScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ClosestSimilarity arguments for searching"""
    incomingId: Union[str, 'types.StringWithAggregatesFilter']
    originalId: Union[str, 'types.StringWithAggregatesFilter']

    AND: List['ClosestSimilarityScalarWhereWithAggregatesInputRecursive2']
    OR: List['ClosestSimilarityScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ClosestSimilarityScalarWhereWithAggregatesInputRecursive2']


class ClosestSimilarityScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ClosestSimilarity arguments for searching"""
    incomingId: Union[str, 'types.StringWithAggregatesFilter']
    originalId: Union[str, 'types.StringWithAggregatesFilter']

    AND: List['ClosestSimilarityScalarWhereWithAggregatesInputRecursive3']
    OR: List['ClosestSimilarityScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ClosestSimilarityScalarWhereWithAggregatesInputRecursive3']


class ClosestSimilarityScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ClosestSimilarity arguments for searching"""
    incomingId: Union[str, 'types.StringWithAggregatesFilter']
    originalId: Union[str, 'types.StringWithAggregatesFilter']

    AND: List['ClosestSimilarityScalarWhereWithAggregatesInputRecursive4']
    OR: List['ClosestSimilarityScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ClosestSimilarityScalarWhereWithAggregatesInputRecursive4']


class ClosestSimilarityScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ClosestSimilarity arguments for searching"""
    incomingId: Union[str, 'types.StringWithAggregatesFilter']
    originalId: Union[str, 'types.StringWithAggregatesFilter']



class ClosestSimilarityGroupByOutput(TypedDict, total=False):
    incomingId: str
    originalId: str
    _sum: 'ClosestSimilaritySumAggregateOutput'
    _avg: 'ClosestSimilarityAvgAggregateOutput'
    _min: 'ClosestSimilarityMinAggregateOutput'
    _max: 'ClosestSimilarityMaxAggregateOutput'
    _count: 'ClosestSimilarityCountAggregateOutput'


class ClosestSimilarityAvgAggregateOutput(TypedDict, total=False):
    """ClosestSimilarity output for aggregating averages"""


class ClosestSimilaritySumAggregateOutput(TypedDict, total=False):
    """ClosestSimilarity output for aggregating sums"""


class ClosestSimilarityScalarAggregateOutput(TypedDict, total=False):
    """ClosestSimilarity output including scalar fields"""
    incomingId: str
    originalId: str


ClosestSimilarityMinAggregateOutput = ClosestSimilarityScalarAggregateOutput
ClosestSimilarityMaxAggregateOutput = ClosestSimilarityScalarAggregateOutput


class ClosestSimilarityMaxAggregateInput(TypedDict, total=False):
    """ClosestSimilarity input for aggregating by max"""
    incomingId: bool
    originalId: bool


class ClosestSimilarityMinAggregateInput(TypedDict, total=False):
    """ClosestSimilarity input for aggregating by min"""
    incomingId: bool
    originalId: bool


class ClosestSimilarityNumberAggregateInput(TypedDict, total=False):
    """ClosestSimilarity input for aggregating numbers"""


ClosestSimilarityAvgAggregateInput = ClosestSimilarityNumberAggregateInput
ClosestSimilaritySumAggregateInput = ClosestSimilarityNumberAggregateInput


ClosestSimilarityCountAggregateInput = TypedDict(
    'ClosestSimilarityCountAggregateInput',
    {
        'incomingId': bool,
        'originalId': bool,
        '_all': bool,
    },
    total=False,
)

ClosestSimilarityCountAggregateOutput = TypedDict(
    'ClosestSimilarityCountAggregateOutput',
    {
        'incomingId': int,
        'originalId': int,
        '_all': int,
    },
    total=False,
)


ClosestSimilarityKeys = Literal[
    'incomingId',
    'originalId',
    'incoming',
    'original',
]
ClosestSimilarityScalarFieldKeys = Literal[
    'incomingId',
    'originalId',
]
ClosestSimilarityScalarFieldKeysT = TypeVar('ClosestSimilarityScalarFieldKeysT', bound=ClosestSimilarityScalarFieldKeys)

ClosestSimilarityRelationalFieldKeys = Literal[
        'incoming',
        'original',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields